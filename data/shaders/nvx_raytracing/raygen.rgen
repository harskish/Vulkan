#version 460
#extension GL_NV_ray_tracing : require

layout(binding = 0, rgba8) uniform writeonly image2D image;
layout(binding = 1) uniform accelerationStructureNV bvh;

layout (std140, binding = 2) readonly uniform UBO
{
	mat4 invR;
	vec4 camPos;
	vec4 lightPos;
	float aspectRatio;
	float fov;
} ubo;

layout(location = 0) rayPayloadNV Payload {
	vec3 color;
} payload;

struct Ray {
    vec3 origin;
    vec3 direction;
};

float toRad(float deg) {
	return deg * 3.141592 / 360.0;
}

Ray generate_ray(vec2 filmPos) {
    const float scale = tan(toRad(ubo.fov / 2.0));
    vec2 posNDC = filmPos / vec2(gl_LaunchSizeNV.xy);

    vec2 uv = 2.0 * posNDC - 1.0;
    float dirX = -uv.x * scale * ubo.aspectRatio;
    float dirY = uv.y * scale;

    Ray ray;
    ray.origin = ubo.camPos.xyz;
    ray.direction = mat3(ubo.invR) * normalize(vec3(dirX, dirY, 1.0));
    return ray;
}

void main() {
    Ray ray = generate_ray(vec2(gl_LaunchIDNV.xy) + vec2(0.5));
	const uint rayFlags = gl_RayFlagsOpaqueNV;
	
	// https://github.com/KhronosGroup/GLSL/blob/master/extensions/nvx/GLSL_NVX_raytracing.txt
	traceNV(
		bvh,              // top level accel
		rayFlags,         // rayFlags
		0xff,             // cullMask
		0,                // sbtRecordOffset
		0,                // sbtRecordStride
		0,                // missIndex
		ray.origin,       // origin
		1e-3f,            // tMin
		ray.direction,    // direction
		1e+5f,            // tMax
		0);               // payload idx (for using different payloads)
	
	imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(payload.color, 1.0));
}