#version 460
#extension GL_NVX_raytracing : require

layout(binding = 0, rgba8) uniform writeonly image2D image;
layout(binding = 1) uniform accelerationStructureNVX bvh;

layout(location = 0) rayPayloadNVX vec3 color;

struct Ray {
    vec3 origin;
    vec3 direction;
};

// https://github.com/kennyalive/vulkan-base
Ray generate_ray(vec2 film_position) {
    const float tan_fovy_over_2 = 0.414; // tan(45/2)

    vec2 uv = film_position / vec2(gl_LaunchSizeNVX.xy);
    float aspect_ratio = float(gl_LaunchSizeNVX.x) / float(gl_LaunchSizeNVX.y);
    float horz_half_dist = aspect_ratio * tan_fovy_over_2;
    float vert_half_dist = tan_fovy_over_2;
    vec2 uv2 = 2.0 * uv - 1.0;
    float dir_x = uv2.x * horz_half_dist;
    float dir_y = -uv2.y * vert_half_dist;

    Ray ray;
    ray.origin = vec3(0, 0, 3);
    ray.direction = normalize(vec3(dir_x, dir_y, -1.f));
    return ray;
}

void main() {
    Ray ray = generate_ray(vec2(gl_LaunchIDNVX.xy) + vec2(0.5));
	const uint rayFlags = gl_RayFlagsOpaqueNVX;
	
	// https://github.com/KhronosGroup/GLSL/blob/master/extensions/nvx/GLSL_NVX_raytracing.txt
	traceNVX(
		bvh,              // top level accel
		rayFlags,         // rayFlags
		0xff,             // cullMask
		0,                // sbtRecordOffset
		0,                // sbtRecordStride
		0,                // missIndex
		ray.origin,       // origin
		1e-3f,            // tMin
		ray.direction,    // direction
		1e+5f,            // tMax
		0);               // payload idx (for using different payloads)
	
	imageStore(image, ivec2(gl_LaunchIDNVX.xy), vec4(color, 1.0));
}